generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subtask {
  id         String    @id @default(uuid())
  isFinished Boolean
  name       String
  Task       Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Tag {
  id String @id @default(uuid())
  name String
  fontColor String
  backgroundColor String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

model Task {
  id                  String       @id @default(uuid())
  title               String
  description         String
  columnId            String
  column              Column       @relation(fields: [columnId], references: [id], onDelete: Cascade)
  tags Tag[]
  subtasks            Subtask[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime?    @updatedAt
  user                User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String?
}

model Column {
  id        String    @id @default(uuid())
  name      String
  dotColor  String
  tasks     Task[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  order     Int
  Board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
}

model Board {
  id        String    @id @default(uuid())
  name      String
  columns   Column[]
  Project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Project {
  id             String          @id @default(uuid())
  name           String
  boards         Board[]
  userId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  usersOnProject UserOnProject[]
}

model User {
  id             String          @id
  name           String
  email          String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  usersOnProject UserOnProject[]
  tasks          Task[]

  @@unique([id])
}

model UserOnProject {
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  project   Project   @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  projectId String
  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())

  @@id([userId, projectId])
}
