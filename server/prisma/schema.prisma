generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subtask {
  id         String    @id @default(uuid())
  isFinished Boolean
  name       String
  Task       Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Task {
  id                  String    @id @default(uuid())
  title               String
  description         String
  columnId            String
  column              Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  tagNames            String[]
  tagFontColors       String[]
  tagBackgroundColors String[]
  subtasks            Subtask[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt
}

model Column {
  id        String    @id @default(uuid())
  name      String
  dotColor  String
  boardId   String
  Board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Board {
  id        String    @id @default(uuid())
  name      String
  columns   Column[]
  Project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Project {
  id        String    @id @default(uuid())
  name      String
  boards    Board[]
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
