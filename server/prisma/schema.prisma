generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subtask {
  id         String    @id @default(uuid())
  isFinished Boolean
  name       String
  Task       Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Task {
  id                  String       @id @default(uuid())
  title               String
  description         String
  columnId            String
  column              Column       @relation(fields: [columnId], references: [id], onDelete: Cascade)
  tagNames            String[]
  tagFontColors       String[]
  tagBackgroundColors String[]
  subtasks            Subtask[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime?    @updatedAt
  userOnTask          UserOnTask[]
}

model Column {
  id              String        @id @default(uuid())
  name            String
  dotColor        String
  tasks           Task[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt
  ColumnWrapper   ColumnWrapper @relation(fields: [columnWrapperId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  columnWrapperId String        @unique
}

model ColumnWrapper {
  id        String   @id @default(uuid())
  column    Column?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
}

model Board {
  id        String          @id @default(uuid())
  name      String
  columns   ColumnWrapper[]
  Project   Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime        @default(now())
  updatedAt DateTime?       @updatedAt
}

model Project {
  id             String          @id @default(uuid())
  name           String
  boards         Board[]
  userId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  usersOnProject UserOnProject[]
}

model User {
  id             String          @id
  name           String
  email          String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  usersOnProject UserOnProject[]
  userOnTask     UserOnTask[]

  @@unique([id])
}

model UserOnTask {
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  task      Task      @relation(fields: [taskId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  taskId    String
  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())

  @@id([userId, taskId])
}

model UserOnProject {
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  project   Project   @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String
  projectId String
  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())

  @@id([userId, projectId])
}
